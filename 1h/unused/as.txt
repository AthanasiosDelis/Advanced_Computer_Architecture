#!/usr/bin/env python

import sys
import numpy as np

## We need matplotlib:
## $ apt-get install python-matplotlib
import matplotlib
#matplotlib.use('Agg')
import matplotlib.pyplot as plt

x_Axis = []
ipc_Axis = []
mpki_Axis = []

#benchmarck = sys.argv[2]
benchmarks = {
	"blackscholes": [],
	"bodytrack":	[],
	"canneal":		[],
	"facesim":		[],
	"ferret":		[],
	"fluidanimate":	[],
	"freqmine":		[],
	"rtview":		[],
	"streamcluster": [],
	"swaptions":	[],
}

fig, ax1 = plt.subplots()
ax1.grid(True)
ax1.set_xlabel("Blocks")
ax1.set_ylabel("$IPC$")
plt.title("IPC")

print(benchmarks)
cache_type = sys.argv[2]
count = 0
for benchmark in benchmarks:
	filename = open("/home/thanasis/advcomparch-2019-2020-ex1-helpcode/outputs_L2_prf/" + str(benchmark) + "/names.txt")
	ipc_Axis = []
	real_ipc_Axis = []
	in_count = 0
	starting = 0
	for line in filename:
		fp = open("/home/thanasis/advcomparch-2019-2020-ex1-helpcode/outputs_L2_prf/" + str(benchmark) + "/" + line.rstrip())
		line = fp.readline()
		while line:
			tokens = line.split()
			if (line.startswith("Total Instructions: ")):
				total_instructions = long(tokens[2])
			elif (line.startswith("Total Cycles: ")):
				total_cycles = long(tokens[2])
			elif (line.startswith("IPC:")):
				ipc = float(tokens[1])
				if in_count == 0:
					starting = ipc
					ipc = 1
				else:
					ipc = ipc / starting
			elif (line.startswith("  L2-Data Cache")):
				sizeLine = fp.readline()
				l2_size = sizeLine.split()[1]
				bsizeLine = fp.readline()
				l2_bsize = bsizeLine.split()[2]
				assocLine = fp.readline()
				l2_assoc = assocLine.split()[1]
			elif (line.startswith("L2_prefetching: Yes (")):
				blocks = long(tokens[3].split(')')[0])
			#elif (line.startswith("l2-Total-Misses")):
				#l2_total_misses = long(tokens[1])
				#l2_miss_rate = float(tokens[2].split('%')[0])
				#mpki = l2_total_misses / (total_instructions / 1000.0)

			line = fp.readline()

		fp.close()
		l2ConfigStr = '{}K.{}.{}B'.format(l2_size,l2_assoc,l2_bsize)
		size_ratio = int(l2_size) / 32 - 1
		assoc_ratio = int(l2_assoc) / 4 - 1
		real_ipc = total_instructions / (total_cycles * (1.05**assoc_ratio) * (1.10**size_ratio))
		if in_count == 0:
			real_starting = real_ipc
			real_ipc = 1
		else:
			real_ipc = real_ipc / real_starting

		in_count = in_count + 1
		if(count == 0):
			x_Axis.append(blocks)
			print l2ConfigStr

		benchmarks[benchmark].append((ipc, real_ipc))

	if count == 0:
		ax1.xaxis.set_ticks(np.arange(0, len(x_Axis), 1))
		ax1.set_xticklabels(x_Axis, rotation=45)
	count = count + 1

geomean = []
real_geomean = []
for i in range(len(x_Axis)):
	prod = 1
	prod2 = 1
	for benchmark in benchmarks:
		x, y = benchmarks[benchmark][i]
		prod = prod*x
		prod2 = prod2*y

	geomean.append(prod**(1/float(10)))
	real_geomean.append(prod2**(1/float(10)))

		#print(benchmarks[benchmark][i])
line1 = ax1.plot(geomean, marker='x', label="geomean")
#line2 = ax1.plot(real_geomean, marker='x', label="real_geomean")


"""
print x_Axis
print ipc_Axis
print mpki_Axis

fig, ax1 = plt.subplots()
ax1.grid(True)
ax1.set_xlabel("CacheSize.Assoc.BlockSize")
#ax1.set_xlabel("Entries.Assoc.BlockSize")

xAx = np.arange(len(x_Axis))

ax1.set_xticklabels(x_Axis, rotation=45)
ax1.set_xlim(-0.5, len(x_Axis) - 0.5)
ax1.set_ylim(min(ipc_Axis) - 0.05 * min(ipc_Axis), max(ipc_Axis) + 0.05 * max(ipc_Axis))
ax1.set_ylabel("$IPC$")
line1 = ax1.plot(ipc_Axis, label="ipc", color="red",marker='x')


ax2 = ax1.twinx()
ax2.xaxis.set_ticks(np.arange(0, len(x_Axis), 1))
ax2.set_xticklabels(x_Axis, rotation=45)
ax2.set_xlim(-0.5, len(x_Axis) - 0.5)
ax2.set_ylim(min(mpki_Axis) - 0.05 * min(mpki_Axis), max(mpki_Axis) + 0.05 * max(mpki_Axis))
ax2.set_ylabel("$MPKI$")
line2 = ax2.plot(mpki_Axis, label=str(cache_type) +"D_mpki", color="green",marker='o')

lns = line1 #+ line2
labs = [l.get_label() for l in lns]

plt.title("IPC")
lgd = plt.legend(lns, labs)
lgd.draw_frame(False)
"""
ax1.legend(loc='upper left')
plt.savefig("outputs/plots/geomean" + str(cache_type) + ".png", bbox_inches="tight")

